from telebot.types import Message

from database.models import User
from keyboards.inline.sort_type import sort_markup
from loader import bot, API
from states.param_states import BotStates
from utils.add_to_history import add_to_history
from utils.get_price import get_price
from utils.show_offers import show_offers
import re


@bot.message_handler(commands=['low', 'high', 'custom'])
def low_high_custom(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Ebay –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    user_id = message.from_user.id
    user = User.get_or_none(User.user_id == user_id)
    if user is None:
        bot.reply_to(message, "üò¢–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
    if message.text == '/custom':
        bot.set_state(message.from_user.id, BotStates.price_range, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã')
    else:
        bot.set_state(message.from_user.id, BotStates.product, message.chat.id)
        bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?(–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)')
    with bot.retrieve_data(message.from_user.id) as data:
        data["sort"] = True if message.text == '/high' else False
        data['price_range'] = None
        data['req_info'] = message.text


@bot.message_handler(state='*', commands=['cancel'])
def cancel(message: Message) -> None:
    """
    –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(state=BotStates.price_range, price_range=True)
def get_price_range(message: Message) -> None:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫—É—é –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.
    –ò –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ storage –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    with bot.retrieve_data(message.from_user.id) as data:
        data["price_range"] = get_price(message.text)
        data['req_info'] = data['req_info'] + f' –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã(${data["price_range"][0]} - ${data["price_range"][1]})'
    bot.send_message(message.chat.id, '–ö–∞–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å?', reply_markup=sort_markup())


@bot.callback_query_handler(func=lambda call: True)
def callback_sort(call) -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param call: –≠–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :return: None
    """
    if call.data == 'asc':
        bot.answer_callback_query(call.id, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã")
        with bot.retrieve_data(call.from_user.id) as data:
            data["sort"] = False
            data['req_info'] = data['req_info'] + ', –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã'
    elif call.data == 'desc':
        bot.answer_callback_query(call.id, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã")
        with bot.retrieve_data(call.from_user.id) as data:
            data["sort"] = True
            data['req_info'] = data['req_info'] + ' (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã)'
    bot.send_message(call.from_user.id, '–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?(–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)')
    bot.set_state(call.from_user.id, BotStates.product, call.from_user.id)


@bot.message_handler(state=BotStates.price_range, price_range=False)
def incorrect_price_range(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω—ã.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    bot.send_message(message.chat.id,
                     'üò¢–£–ø—Å... –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!\n(–ü—Ä–∏–º–µ—Ä: 15 - 30)')


@bot.message_handler(state=BotStates.product)
def get_product(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞—é—â–∞—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.
    –ò –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ storage –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞?')
    bot.set_state(message.from_user.id, BotStates.get_offers, message.chat.id)
    with bot.retrieve_data(message.from_user.id) as data:
        data["product"] = message.text
        #
        data['req_info'] = re.sub(r'/\w+', re.match(r'/\w+', data['req_info']).group(0) + f' –¢–æ–≤–∞—Ä:{message.text}',
                                  data['req_info'])


@bot.message_handler(state=BotStates.get_offers, correct_amount=True)
def get_content(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return:None
    """

    with bot.retrieve_data(message.from_user.id) as data:
        data["amount"] = message.text
        data['req_info'] = re.sub(data['product'],
                                  re.findall(data['product'], data['req_info'])[
                                      0] + f' –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {message.text}.',
                                  data['req_info'])
    bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è —Å–æ–±–∏—Ä–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...')
    try:

        offers = API.send_request(product=data['product'], amount=int(data['amount']), reverse=data['sort'],
                                  price_range=data['price_range'])
        show_offers(offers, message.chat.id)
        add_to_history(user_id=message.from_user.id, offers=offers, req_info=data['req_info'])

    except Exception:
        bot.send_message(message.chat.id, 'üòî–£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.')
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(state=BotStates.get_offers, correct_amount=False)
def incorrect_amount(message: Message) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —á–∏—Å–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    bot.send_message(message.chat.id,
                     'üò¢–£–ø—Å... –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —á–∏—Å–ª–æ, –º–µ–Ω—å—à–µ–µ –Ω—É–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
